/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Prevent font size inflation */
html {
  -moz-text-size-adjust: none;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
}

/* Remove default margin in favour of better control in authored CSS */
body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin-block-end: 0;
  margin-block-start: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role=list],
ol[role=list] {
  list-style: none;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  line-height: 1.5;
}

/* Set shorter line heights on headings and interactive elements */
h1,
h2,
h3,
h4,
button,
input,
label {
  line-height: 1.1;
}

/* Balance text wrapping on headings */
h1,
h2,
h3,
h4 {
  text-wrap: balance;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  -webkit-text-decoration-skip: ink;
          text-decoration-skip-ink: auto;
  color: currentColor;
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
}

/* Make sure textareas without a rows attribute are not tiny */
textarea:not([rows]) {
  min-height: 10em;
}

/* Anything that has been anchored to should have extra scroll margin */
:target {
  scroll-margin-block: 5ex;
}

#wrapper {
  max-width: 1100px;
  margin: 0 auto;
  padding: 5rem;
}

body {
  font-family: sans-serif;
  color: #626262;
}

code:not([class]) {
  background-color: #b639ff;
  color: white;
  padding: 1px 5px;
  border-radius: 5px;
  font-size: 1rem;
}

.overlapping-grid .text {
  font-size: 2rem;
}

.overlapping-grid-2 .text,
.overlapping-grid-2 .text-2 {
  font-size: 6.25rem;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  color: #3a035e;
  margin: 1em 0;
}

h1 {
  font-size: 1.875rem;
}

h2 {
  font-size: 1.5625rem;
}

h3 {
  font-size: 1.25rem;
}

p {
  font-size: 1.125rem;
  line-height: 1.5;
  margin: 1em 0;
}

hr {
  margin: 1rem 0;
}

.accordion-title {
  cursor: pointer;
}

.accordion-content {
  display: grid;
  grid-template-rows: 0fr;
  transition: grid-template-rows 250ms;
  border-bottom: 1px dashed #3a035e;
}
.accordion-content.open {
  grid-template-rows: 1fr;
  padding-bottom: 2em;
}
.accordion-content > div {
  overflow: hidden;
}

.demo {
  overflow: auto;
  resize: horizontal;
  border: 3px solid #eee;
  padding: 15px;
  container-type: inline-size;
}

.card {
  height: 150px;
  background-color: #f0d6ff;
}

.flex {
  display: flex;
  height: 300vh;
  align-items: center;
}

#card-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1rem;
}

#card-container-2 {
  display: grid;
  gap: 1rem;
}

@container (min-width: 40em) {
  #card-container-2 {
    grid-template-columns: repeat(3, 1fr);
  }
  #card-container-2 .card-1 {
    grid-column-start: 1;
    grid-column-end: 3;
  }
  #card-container-2 .card-7 {
    grid-column-start: 2;
    grid-column-end: 4;
  }
}
#card-container-3 {
  display: grid;
  gap: 1rem;
}

@container (min-width: 40em) {
  #card-container-3 {
    grid-template-columns: repeat(4, 1fr);
  }
  #card-container-3 .span-2 {
    grid-column: span 2;
  }
}
.content-grid {
  display: grid;
  grid-template-columns: [full-width-start] 1fr [content-start] minmax(250px, 700px) [content-end] 1fr [full-width-end];
}

.content-grid > * {
  grid-column: content;
}

.content-grid > .full-width {
  grid-column: full-width;
  background-color: #b639ff;
  color: #3a035e;
}

/*# sourceMappingURL=data:application/json;base64, */